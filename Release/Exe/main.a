;#include <mega16a.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <lcd.h>
;
;
;#asm
;PCODE: $0000000D VOL: 0
 .equ __lcd_port=0x15;
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
; 0000 0007 #endasm
;
;#include <delay.h>
;#define IS_ON_LED_OUT PORTD .6
;#define ALARM_OUT PORTD .5
;#define IS_SENSOR_PAUSED_LED PORTD .7
;#define KEYPAD_PIN PINB
;#define KEYPAD_PORT PORTB
;#define KEYPAD_ENABLE_PIN PINA .3
;#define REMOTE_PIN PINA
;int PAUSE_TIME_AFTER_DISCARD_SECONDS = 5;
;
;typedef enum
;{
;  rmt_no_action, // Do nothing, prevents default behaviour of enums.
;  rmt_turn_on,
;  rmt_turn_off,
;  rmt_discard_alarm,
;} eRemoteAction;
;
;bit is_on = 1;
;bit alarm_triggered = 0;  // If alarm is triggered, this will be 1 until alarm is discarded
;bit is_silent_mode = 0;   // A few seconds after alarm discard, the sensor input will be ignored.
;bit is_remote_locked = 0; // if remote is locked programmatically using keypad
;void temporarily_pause_sensor()
; 0000 0020 {

	.CSEG
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 0021   // with prescale set to 1024 and clk frequency = 1MHz, timer counts almost 1ms each clock.
; 0000 0022   int timer_bottom = (65 - PAUSE_TIME_AFTER_DISCARD_SECONDS) * 1000;
; 0000 0023   is_silent_mode = 1;
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;	timer_bottom -> R16,R17
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 0024   TCNT1 = timer_bottom;
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 0025   TCCR1B |= 0x05; // prescale set to 5 -> 1MHz / 1024 ~= 1ms
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0026 }
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;
;void handle_remote_action(eRemoteAction rmt_action)
; 0000 0029 {
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 002A   if (rmt_action == rmt_no_action)
;PCODE: $00000026 VOL: 0
;	rmt_action -> Y+0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 002B     return;
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 002C 
; 0000 002D   if (rmt_action == rmt_turn_on)
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 002E   {
; 0000 002F     is_on = 1;
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 0030   }
; 0000 0031   if (rmt_action == rmt_turn_off)
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 0032   {
; 0000 0033     is_on = 0;
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 0034     alarm_triggered = 0;
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 0035   }
; 0000 0036   if (rmt_action == rmt_discard_alarm)
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 0037   {
; 0000 0038     alarm_triggered = 0;
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 0039     temporarily_pause_sensor();
;PCODE: $00000044 VOL: 0
; 0000 003A   }
; 0000 003B }
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;
;
;const char KEYPAD_MATRIX[4][3] = {
;    {'1', '2', '3'}, {'4', '5', '6'}, {'7', '8', '9'}, {'*', '0', '#'}};
;
;typedef enum
;{
;  kp_no_action,
;  kp_turn_on,
;  kp_turn_off,
;  kp_lock_remote,
;  kp_unlock_remote,
;  kp_discard_alarm
;} eKeypadAction;
;
;char read_keypad()
; 0000 004C {
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 004D   char key = 0;
; 0000 004E 
; 0000 004F   while (1)
;PCODE: $0000004B VOL: 0
;	key -> R17
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 0050   {
; 0000 0051     int i, j;
; 0000 0052     if (KEYPAD_ENABLE_PIN == 0)
;PCODE: $0000004F VOL: 0
;	i -> Y+2
;	j -> Y+0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 0053     {
; 0000 0054       break;
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 0055     }
; 0000 0056 
; 0000 0057     for (i = 0; i < 3; i++)
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 0058     {
; 0000 0059       // Set one column low at a time
; 0000 005A       KEYPAD_PORT |= 0x0F;
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 005B       KEYPAD_PORT &= ~(1 << i);
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 005C 
; 0000 005D       delay_ms(5);
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 005E 
; 0000 005F       // Check rows
; 0000 0060       for (j = 0; j < 4; j++)
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 0061       {
; 0000 0062         if (!(KEYPAD_PIN & (1 << (j + 4))))
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 0063         {
; 0000 0064           // Key pressed
; 0000 0065           key = KEYPAD_MATRIX[j][i];
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0000 0066           while (!(KEYPAD_PIN & (1 << (j + 4))))
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0000 0067             ; // Wait for key release
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0000 0068           return key;
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0000 0069         }
; 0000 006A       }
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 006B     }
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 006C   }
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0000 006D }
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;
;void handle_keypad_action(eKeypadAction action)
; 0000 0070 {
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0000 0071   if (action == kp_no_action)
;PCODE: $000000B1 VOL: 0
;	action -> Y+0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0000 0072     return;
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; 0000 0073   if (action == kp_turn_on)
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0000 0074   {
; 0000 0075     is_on = 1;
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
; 0000 0076   }
; 0000 0077 
; 0000 0078   if (action == kp_turn_off)
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0000 0079   {
; 0000 007A     is_on = 0;
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
; 0000 007B   }
; 0000 007C 
; 0000 007D   if (action == kp_lock_remote)
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0000 007E   {
; 0000 007F     is_remote_locked = 1;
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
; 0000 0080   }
; 0000 0081 
; 0000 0082   if (action == kp_unlock_remote)
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
; 0000 0083   {
; 0000 0084     is_remote_locked = 0;
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
; 0000 0085   }
; 0000 0086   if (action == kp_discard_alarm)
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
; 0000 0087   {
; 0000 0088     alarm_triggered = 0;
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
; 0000 0089   }
; 0000 008A }
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;
;void lcd_render_guide()
; 0000 008D {
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
; 0000 008E   lcd_clear();
;PCODE: $000000E0 VOL: 0
; 0000 008F   lcd_gotoxy(0, 0);
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
; 0000 0090   delay_ms(10);
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
; 0000 0091   lcd_puts("1:on 2:off");
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
; 0000 0092   delay_ms(15);
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
; 0000 0093   lcd_gotoxy(0, 1);
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
; 0000 0094   delay_ms(15);
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
; 0000 0095   lcd_puts("3:lock 4:unlock");
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
; 0000 0096 }
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0

	.DSEG
_0x1B:
	.BYTE 0x1B
;
;interrupt[2] void trigger_alarm()
; 0000 0099 {

	.CSEG
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
; 0000 009A   if (is_on == 1 && !is_silent_mode)
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
; 0000 009B   {
; 0000 009C     alarm_triggered = 1;
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
; 0000 009D   } else {
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
; 0000 009E   return;
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
; 0000 009F   }
;PCODE: $0000010D VOL: 0
; 0000 00A0 }
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;
;interrupt[TIM1_OVF] void exit_silent_mode()
; 0000 00A3 {
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
; 0000 00A4   TCCR1B = 0x00; // turn off the timer
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
; 0000 00A5   is_silent_mode = 0;
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
; 0000 00A6   alarm_triggered = 0;
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
; 0000 00A7 }
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;
;
;void main()
; 0000 00AB {
;PCODE: $0000011E VOL: 0
; 0000 00AC #asm("sei")    // Enable interrupt
;PCODE: $0000011F VOL: 0
	sei
;PCODE: $00000120 VOL: 0
; 0000 00AD   DDRA = 0x00; // Input
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
; 0000 00AE   DDRB = 0x0f; // Keypad Set columns as output and rows as input
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
; 0000 00AF   PORTB = 0xf0;
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
; 0000 00B0   DDRC = 0xff;
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
; 0000 00B1   PORTC = 0x00;
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
; 0000 00B2   DDRD = 0b11100000; // Output
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
; 0000 00B3   PORTD = 0b01000000;
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
; 0000 00B4   GICR = 0b01000000;  // Enabling interrupt 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
; 0000 00B5   MCUCR = 0b00000011; // Rising Edge
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
; 0000 00B6   GIFR = 0b0000000;
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
; 0000 00B7   IS_ON_LED_OUT = 1;
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
; 0000 00B8   ALARM_OUT = 0;
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
; 0000 00B9   TIMSK |= (1 << TOIE1); // Enable Timer1 Overflow
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
; 0000 00BA 
; 0000 00BB   lcd_init(16);
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
; 0000 00BC   delay_ms(10);
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
; 0000 00BD   lcd_render_guide();
;PCODE: $00000141 VOL: 0
; 0000 00BE   delay_ms(10);
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
; 0000 00BF   while (1)
;PCODE: $00000145 VOL: 0
; 0000 00C0   {
; 0000 00C1     eRemoteAction rmt_action = rmt_no_action;
; 0000 00C2     if (REMOTE_PIN .0 == 1)
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;	rmt_action -> Y+0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
; 0000 00C3     {
; 0000 00C4       rmt_action = rmt_turn_on;
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
; 0000 00C5     }
; 0000 00C6 
; 0000 00C7     if (REMOTE_PIN .1 == 1)
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
; 0000 00C8     {
; 0000 00C9       rmt_action = rmt_turn_off;
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
; 0000 00CA     }
; 0000 00CB 
; 0000 00CC     if (REMOTE_PIN .2 == 1)
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
; 0000 00CD     {
; 0000 00CE       rmt_action = rmt_discard_alarm;
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
; 0000 00CF     }
; 0000 00D0 
; 0000 00D1     if (REMOTE_PIN .3 == 1)
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
; 0000 00D2     {
; 0000 00D3       rmt_action = rmt_turn_on;
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
; 0000 00D4     }
; 0000 00D5     if (is_remote_locked != 1)
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
; 0000 00D6     {
; 0000 00D7       handle_remote_action(rmt_action);
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
; 0000 00D8     }
; 0000 00D9 
; 0000 00DA     if (KEYPAD_ENABLE_PIN == 1)
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
; 0000 00DB     {
; 0000 00DC 
; 0000 00DD       eKeypadAction keypad_action = kp_no_action;
; 0000 00DE       char pressed_key;
; 0000 00DF       pressed_key = read_keypad();
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;	rmt_action -> Y+2
;	keypad_action -> Y+1
;	pressed_key -> Y+0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
; 0000 00E0       if (pressed_key == '1')
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
; 0000 00E1       {
; 0000 00E2         keypad_action = kp_turn_on;
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
; 0000 00E3       }
; 0000 00E4       if (pressed_key == '2')
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
; 0000 00E5       {
; 0000 00E6         keypad_action = kp_turn_off;
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
; 0000 00E7       }
; 0000 00E8       if (pressed_key == '3')
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
; 0000 00E9       {
; 0000 00EA         keypad_action = kp_lock_remote;
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
; 0000 00EB       }
; 0000 00EC       if (pressed_key == '4')
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
; 0000 00ED       {
; 0000 00EE         keypad_action = kp_unlock_remote;
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
; 0000 00EF       }
; 0000 00F0       if (pressed_key == '5')
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
; 0000 00F1       {
; 0000 00F2         keypad_action = kp_discard_alarm;
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
; 0000 00F3       }
; 0000 00F4       handle_keypad_action(keypad_action);
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
; 0000 00F5     }
;PCODE: $0000018F VOL: 0
; 0000 00F6     IS_ON_LED_OUT = is_on == 1 ? 1 : 0;
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
; 0000 00F7     ALARM_OUT = alarm_triggered;
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
; 0000 00F8     IS_SENSOR_PAUSED_LED = is_silent_mode ? 1 : 0;
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
; 0000 00F9   }
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
; 0000 00FA }
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
