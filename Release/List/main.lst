
AVRASM ver. 2.1.30  F:\College\14021\Digital II\Practice\Final-2\Release\List\main.asm Sat Dec 23 15:33:42 2023

F:\College\14021\Digital II\Practice\Final-2\Release\List\main.asm(1088): warning: Register r4 already defined by the .DEF directive
F:\College\14021\Digital II\Practice\Final-2\Release\List\main.asm(1089): warning: Register r5 already defined by the .DEF directive
F:\College\14021\Digital II\Practice\Final-2\Release\List\main.asm(1090): warning: Register r7 already defined by the .DEF directive
F:\College\14021\Digital II\Practice\Final-2\Release\List\main.asm(1091): warning: Register r6 already defined by the .DEF directive
F:\College\14021\Digital II\Practice\Final-2\Release\List\main.asm(1092): warning: Register r9 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.14 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Release
                 ;Chip type              : ATmega16A
                 ;Program type           : Application
                 ;Clock frequency        : 1.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16A
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _PAUSE_TIME_AFTER_DISCARD_SECONDS=R4
                 	.DEF _PAUSE_TIME_AFTER_DISCARD_SECONDS_msb=R5
                 	.DEF __lcd_x=R7
                 	.DEF __lcd_y=R6
                 	.DEF __lcd_maxx=R9
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0051 	JMP  __RESET
000002 940c 0135 	JMP  _trigger_alarm
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0141 	JMP  _exit_silent_mode
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _KEYPAD_MATRIX:
00002a 3231
00002b 3433
00002c 3635
00002d 3837      	.DB  0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38
00002e 2a39
00002f 2330      	.DB  0x39,0x2A,0x30,0x23
                 
                 ;REGISTER BIT VARIABLES INITIALIZATION
                 __REG_BIT_VARS:
000030 0001      	.DW  0x0001
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000031 0005      	.DB  0x5,0x0
                 
                 _0x0:
000032 3a31
000033 6e6f
000034 3220
000035 6f3a      	.DB  0x31,0x3A,0x6F,0x6E,0x20,0x32,0x3A,0x6F
000036 6666
000037 3300
000038 6c3a
000039 636f      	.DB  0x66,0x66,0x0,0x33,0x3A,0x6C,0x6F,0x63
00003a 206b
00003b 3a34
00003c 6e75
00003d 6f6c      	.DB  0x6B,0x20,0x34,0x3A,0x75,0x6E,0x6C,0x6F
00003e 6b63
F:\College\14021\Digital II\Practice\Final-2\Release\List\main.asm(1139): warning: .cseg .db misalignment - padding zero byte
00003f 0000      	.DB  0x63,0x6B,0x0
                 _0x2000003:
000040 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000041 0001      	.DW  0x01
000042 0002      	.DW  0x02
000043 0060      	.DW  __REG_BIT_VARS*2
                 
000044 0002      	.DW  0x02
000045 0004      	.DW  0x04
000046 0062      	.DW  __REG_VARS*2
                 
000047 000b      	.DW  0x0B
000048 0160      	.DW  _0x1B
000049 0064      	.DW  _0x0*2
                 
00004a 0010      	.DW  0x10
00004b 016b      	.DW  _0x1B+11
00004c 006f      	.DW  _0x0*2+11
                 
00004d 0002      	.DW  0x02
00004e 017b      	.DW  __base_y_G100
00004f 0080      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
000050 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000051 94f8      	CLI
000052 27ee      	CLR  R30
000053 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000054 e0f1      	LDI  R31,1
000055 bffb      	OUT  GICR,R31
000056 bfeb      	OUT  GICR,R30
000057 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000058 e08d      	LDI  R24,(14-2)+1
000059 e0a2      	LDI  R26,2
00005a 27bb      	CLR  R27
                 __CLEAR_REG:
00005b 93ed      	ST   X+,R30
00005c 958a      	DEC  R24
00005d f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00005e e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00005f e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000060 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000061 93ed      	ST   X+,R30
000062 9701      	SBIW R24,1
000063 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000064 e8e2      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000065 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000066 9185      	LPM  R24,Z+
000067 9195      	LPM  R25,Z+
000068 9700      	SBIW R24,0
000069 f061      	BREQ __GLOBAL_INI_END
00006a 91a5      	LPM  R26,Z+
00006b 91b5      	LPM  R27,Z+
00006c 9005      	LPM  R0,Z+
00006d 9015      	LPM  R1,Z+
00006e 01bf      	MOVW R22,R30
00006f 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000070 9005      	LPM  R0,Z+
000071 920d      	ST   X+,R0
000072 9701      	SBIW R24,1
000073 f7e1      	BRNE __GLOBAL_INI_LOOP
000074 01fb      	MOVW R30,R22
000075 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000076 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000077 bfed      	OUT  SPL,R30
000078 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000079 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00007a e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00007b e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00007c 940c 014d 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;#include <mega16a.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <lcd.h>
                 ;
                 ;
                 ;#asm
                  .equ __lcd_port=0x15;
                 ; 0000 0007 #endasm
                 ;
                 ;#include <delay.h>
                 ;#define IS_ON_LED_OUT PORTD .6
                 ;#define ALARM_OUT PORTD .5
                 ;#define IS_SENSOR_PAUSED_LED PORTD .7
                 ;#define KEYPAD_PIN PINB
                 ;#define KEYPAD_PORT PORTB
                 ;#define KEYPAD_ENABLE_PIN PINA .3
                 ;#define REMOTE_PIN PINA
                 ;int PAUSE_TIME_AFTER_DISCARD_SECONDS = 5;
                 ;
                 ;typedef enum
                 ;{
                 ;  rmt_no_action, // Do nothing, prevents default behaviour of enums.
                 ;  rmt_turn_on,
                 ;  rmt_turn_off,
                 ;  rmt_discard_alarm,
                 ;} eRemoteAction;
                 ;
                 ;bit is_on = 1;
                 ;bit alarm_triggered = 0;  // If alarm is triggered, this will be 1 until alarm is discarded
                 ;bit is_silent_mode = 0;   // A few seconds after alarm discard, the sensor input will be ignored.
                 ;bit is_remote_locked = 0; // if remote is locked programmatically using keypad
                 ;void temporarily_pause_sensor()
                 ; 0000 0020 {
                 
                 	.CSEG
                 _temporarily_pause_sensor:
                 ; .FSTART _temporarily_pause_sensor
                 ; 0000 0021   // with prescale set to 1024 and clk frequency = 1MHz, timer counts almost 1ms each clock.
                 ; 0000 0022   int timer_bottom = (65 - PAUSE_TIME_AFTER_DISCARD_SECONDS) * 1000;
                 ; 0000 0023   is_silent_mode = 1;
00007e 931a      	ST   -Y,R17
00007f 930a      	ST   -Y,R16
                 ;	timer_bottom -> R16,R17
000080 e4e1      	LDI  R30,LOW(65)
000081 e0f0      	LDI  R31,HIGH(65)
000082 19e4      	SUB  R30,R4
000083 09f5      	SBC  R31,R5
000084 eea8      	LDI  R26,LOW(1000)
000085 e0b3      	LDI  R27,HIGH(1000)
000086 940e 02d7 	CALL __MULW12
000088 018f      	MOVW R16,R30
000089 9468      	SET
00008a f822      	BLD  R2,2
                 ; 0000 0024   TCNT1 = timer_bottom;
                +
00008b bd1d     +OUT 44 + 1 , R17
00008c bd0c     +OUT 44 , R16
                 	__OUTWR 16,17,44
                 ; 0000 0025   TCCR1B |= 0x05; // prescale set to 5 -> 1MHz / 1024 ~= 1ms
00008d b5ee      	IN   R30,0x2E
00008e 60e5      	ORI  R30,LOW(0x5)
00008f bdee      	OUT  0x2E,R30
                 ; 0000 0026 }
000090 9109      	LD   R16,Y+
000091 9119      	LD   R17,Y+
000092 9508      	RET
                 ; .FEND
                 ;
                 ;void handle_remote_action(eRemoteAction rmt_action)
                 ; 0000 0029 {
                 _handle_remote_action:
                 ; .FSTART _handle_remote_action
                 ; 0000 002A   if (rmt_action == rmt_no_action)
000093 93aa      	ST   -Y,R26
                 ;	rmt_action -> Y+0
000094 81e8      	LD   R30,Y
000095 30e0      	CPI  R30,0
000096 f411      	BRNE _0x3
                 ; 0000 002B     return;
000097 940c 028e 	JMP  _0x2020001
                 ; 0000 002C 
                 ; 0000 002D   if (rmt_action == rmt_turn_on)
                 _0x3:
000099 81a8      	LD   R26,Y
00009a 30a1      	CPI  R26,LOW(0x1)
00009b f411      	BRNE _0x4
                 ; 0000 002E   {
                 ; 0000 002F     is_on = 1;
00009c 9468      	SET
00009d f820      	BLD  R2,0
                 ; 0000 0030   }
                 ; 0000 0031   if (rmt_action == rmt_turn_off)
                 _0x4:
00009e 81a8      	LD   R26,Y
00009f 30a2      	CPI  R26,LOW(0x2)
0000a0 f419      	BRNE _0x5
                 ; 0000 0032   {
                 ; 0000 0033     is_on = 0;
0000a1 94e8      	CLT
0000a2 f820      	BLD  R2,0
                 ; 0000 0034     alarm_triggered = 0;
0000a3 f821      	BLD  R2,1
                 ; 0000 0035   }
                 ; 0000 0036   if (rmt_action == rmt_discard_alarm)
                 _0x5:
0000a4 81a8      	LD   R26,Y
0000a5 30a3      	CPI  R26,LOW(0x3)
0000a6 f419      	BRNE _0x6
                 ; 0000 0037   {
                 ; 0000 0038     alarm_triggered = 0;
0000a7 94e8      	CLT
0000a8 f821      	BLD  R2,1
                 ; 0000 0039     temporarily_pause_sensor();
0000a9 dfd4      	RCALL _temporarily_pause_sensor
                 ; 0000 003A   }
                 ; 0000 003B }
                 _0x6:
0000aa 940c 028e 	JMP  _0x2020001
                 ; .FEND
                 ;
                 ;
                 ;const char KEYPAD_MATRIX[4][3] = {
                 ;    {'1', '2', '3'}, {'4', '5', '6'}, {'7', '8', '9'}, {'*', '0', '#'}};
                 ;
                 ;typedef enum
                 ;{
                 ;  kp_no_action,
                 ;  kp_turn_on,
                 ;  kp_turn_off,
                 ;  kp_lock_remote,
                 ;  kp_unlock_remote,
                 ;  kp_discard_alarm
                 ;} eKeypadAction;
                 ;
                 ;char read_keypad()
                 ; 0000 004C {
                 _read_keypad:
                 ; .FSTART _read_keypad
                 ; 0000 004D   char key = 0;
                 ; 0000 004E 
                 ; 0000 004F   while (1)
0000ac 931a      	ST   -Y,R17
                 ;	key -> R17
0000ad e010      	LDI  R17,0
                 _0x7:
                 ; 0000 0050   {
                 ; 0000 0051     int i, j;
                 ; 0000 0052     if (KEYPAD_ENABLE_PIN == 0)
0000ae 9724      	SBIW R28,4
                 ;	i -> Y+2
                 ;	j -> Y+0
0000af 99cb      	SBIC 0x19,3
0000b0 c002      	RJMP _0xA
                 ; 0000 0053     {
                 ; 0000 0054       break;
0000b1 9624      	ADIW R28,4
0000b2 c040      	RJMP _0x9
                 ; 0000 0055     }
                 ; 0000 0056 
                 ; 0000 0057     for (i = 0; i < 3; i++)
                 _0xA:
0000b3 e0e0      	LDI  R30,LOW(0)
0000b4 83ea      	STD  Y+2,R30
0000b5 83eb      	STD  Y+2+1,R30
                 _0xC:
0000b6 81aa      	LDD  R26,Y+2
0000b7 81bb      	LDD  R27,Y+2+1
0000b8 9713      	SBIW R26,3
0000b9 f5bc      	BRGE _0xD
                 ; 0000 0058     {
                 ; 0000 0059       // Set one column low at a time
                 ; 0000 005A       KEYPAD_PORT |= 0x0F;
0000ba b3e8      	IN   R30,0x18
0000bb 60ef      	ORI  R30,LOW(0xF)
0000bc bbe8      	OUT  0x18,R30
                 ; 0000 005B       KEYPAD_PORT &= ~(1 << i);
0000bd b218      	IN   R1,24
0000be 81ea      	LDD  R30,Y+2
0000bf e0a1      	LDI  R26,LOW(1)
0000c0 940e 02b8 	CALL __LSLB12
0000c2 95e0      	COM  R30
0000c3 21e1      	AND  R30,R1
0000c4 bbe8      	OUT  0x18,R30
                 ; 0000 005C 
                 ; 0000 005D       delay_ms(5);
0000c5 e0a5      	LDI  R26,LOW(5)
0000c6 e0b0      	LDI  R27,0
0000c7 940e 02aa 	CALL _delay_ms
                 ; 0000 005E 
                 ; 0000 005F       // Check rows
                 ; 0000 0060       for (j = 0; j < 4; j++)
0000c9 e0e0      	LDI  R30,LOW(0)
0000ca 83e8      	STD  Y+0,R30
0000cb 83e9      	STD  Y+0+1,R30
                 _0xF:
0000cc 81a8      	LD   R26,Y
0000cd 81b9      	LDD  R27,Y+1
0000ce 9714      	SBIW R26,4
0000cf f4dc      	BRGE _0x10
                 ; 0000 0061       {
                 ; 0000 0062         if (!(KEYPAD_PIN & (1 << (j + 4))))
0000d0 940e 0290 	CALL SUBOPT_0x0
0000d2 f491      	BRNE _0x11
                 ; 0000 0063         {
                 ; 0000 0064           // Key pressed
                 ; 0000 0065           key = KEYPAD_MATRIX[j][i];
0000d3 81a8      	LD   R26,Y
0000d4 81b9      	LDD  R27,Y+1
0000d5 e0e3      	LDI  R30,LOW(3)
0000d6 940e 02d1 	CALL __MULB1W2U
0000d8 5aec      	SUBI R30,LOW(-_KEYPAD_MATRIX*2)
0000d9 4fff      	SBCI R31,HIGH(-_KEYPAD_MATRIX*2)
0000da 81aa      	LDD  R26,Y+2
0000db 81bb      	LDD  R27,Y+2+1
0000dc 0fea      	ADD  R30,R26
0000dd 1ffb      	ADC  R31,R27
0000de 9114      	LPM  R17,Z
                 ; 0000 0066           while (!(KEYPAD_PIN & (1 << (j + 4))))
                 _0x12:
0000df 940e 0290 	CALL SUBOPT_0x0
0000e1 f3e9      	BREQ _0x12
                 ; 0000 0067             ; // Wait for key release
                 ; 0000 0068           return key;
0000e2 2fe1      	MOV  R30,R17
0000e3 9624      	ADIW R28,4
0000e4 c00e      	RJMP _0x2020002
                 ; 0000 0069         }
                 ; 0000 006A       }
                 _0x11:
0000e5 81e8      	LD   R30,Y
0000e6 81f9      	LDD  R31,Y+1
0000e7 9631      	ADIW R30,1
0000e8 83e8      	ST   Y,R30
0000e9 83f9      	STD  Y+1,R31
0000ea cfe1      	RJMP _0xF
                 _0x10:
                 ; 0000 006B     }
0000eb 81ea      	LDD  R30,Y+2
0000ec 81fb      	LDD  R31,Y+2+1
0000ed 9631      	ADIW R30,1
0000ee 83ea      	STD  Y+2,R30
0000ef 83fb      	STD  Y+2+1,R31
0000f0 cfc5      	RJMP _0xC
                 _0xD:
                 ; 0000 006C   }
0000f1 9624      	ADIW R28,4
0000f2 cfbb      	RJMP _0x7
                 _0x9:
                 ; 0000 006D }
                 _0x2020002:
0000f3 9119      	LD   R17,Y+
0000f4 9508      	RET
                 ; .FEND
                 ;
                 ;void handle_keypad_action(eKeypadAction action)
                 ; 0000 0070 {
                 _handle_keypad_action:
                 ; .FSTART _handle_keypad_action
                 ; 0000 0071   if (action == kp_no_action)
0000f5 93aa      	ST   -Y,R26
                 ;	action -> Y+0
0000f6 81e8      	LD   R30,Y
0000f7 30e0      	CPI  R30,0
0000f8 f411      	BRNE _0x15
                 ; 0000 0072     return;
0000f9 940c 028e 	JMP  _0x2020001
                 ; 0000 0073   if (action == kp_turn_on)
                 _0x15:
0000fb 81a8      	LD   R26,Y
0000fc 30a1      	CPI  R26,LOW(0x1)
0000fd f411      	BRNE _0x16
                 ; 0000 0074   {
                 ; 0000 0075     is_on = 1;
0000fe 9468      	SET
0000ff f820      	BLD  R2,0
                 ; 0000 0076   }
                 ; 0000 0077 
                 ; 0000 0078   if (action == kp_turn_off)
                 _0x16:
000100 81a8      	LD   R26,Y
000101 30a2      	CPI  R26,LOW(0x2)
000102 f411      	BRNE _0x17
                 ; 0000 0079   {
                 ; 0000 007A     is_on = 0;
000103 94e8      	CLT
000104 f820      	BLD  R2,0
                 ; 0000 007B   }
                 ; 0000 007C 
                 ; 0000 007D   if (action == kp_lock_remote)
                 _0x17:
000105 81a8      	LD   R26,Y
000106 30a3      	CPI  R26,LOW(0x3)
000107 f411      	BRNE _0x18
                 ; 0000 007E   {
                 ; 0000 007F     is_remote_locked = 1;
000108 9468      	SET
000109 f823      	BLD  R2,3
                 ; 0000 0080   }
                 ; 0000 0081 
                 ; 0000 0082   if (action == kp_unlock_remote)
                 _0x18:
00010a 81a8      	LD   R26,Y
00010b 30a4      	CPI  R26,LOW(0x4)
00010c f411      	BRNE _0x19
                 ; 0000 0083   {
                 ; 0000 0084     is_remote_locked = 0;
00010d 94e8      	CLT
00010e f823      	BLD  R2,3
                 ; 0000 0085   }
                 ; 0000 0086   if (action == kp_discard_alarm)
                 _0x19:
00010f 81a8      	LD   R26,Y
000110 30a5      	CPI  R26,LOW(0x5)
000111 f411      	BRNE _0x1A
                 ; 0000 0087   {
                 ; 0000 0088     alarm_triggered = 0;
000112 94e8      	CLT
000113 f821      	BLD  R2,1
                 ; 0000 0089   }
                 ; 0000 008A }
                 _0x1A:
000114 940c 028e 	JMP  _0x2020001
                 ; .FEND
                 ;
                 ;void lcd_render_guide()
                 ; 0000 008D {
                 _lcd_render_guide:
                 ; .FSTART _lcd_render_guide
                 ; 0000 008E   lcd_clear();
000116 940e 0214 	CALL _lcd_clear
                 ; 0000 008F   lcd_gotoxy(0, 0);
000118 e0e0      	LDI  R30,LOW(0)
000119 93ea      	ST   -Y,R30
00011a e0a0      	LDI  R26,LOW(0)
00011b 940e 0204 	CALL _lcd_gotoxy
                 ; 0000 0090   delay_ms(10);
00011d 940e 029e 	CALL SUBOPT_0x1
                 ; 0000 0091   lcd_puts("1:on 2:off");
                +
00011f e6a0     +LDI R26 , LOW ( _0x1B + ( 0 ) )
000120 e0b1     +LDI R27 , HIGH ( _0x1B + ( 0 ) )
                 	__POINTW2MN _0x1B,0
000121 940e 0241 	CALL _lcd_puts
                 ; 0000 0092   delay_ms(15);
000123 e0af      	LDI  R26,LOW(15)
000124 e0b0      	LDI  R27,0
000125 940e 02aa 	CALL _delay_ms
                 ; 0000 0093   lcd_gotoxy(0, 1);
000127 e0e0      	LDI  R30,LOW(0)
000128 93ea      	ST   -Y,R30
000129 e0a1      	LDI  R26,LOW(1)
00012a 940e 0204 	CALL _lcd_gotoxy
                 ; 0000 0094   delay_ms(15);
00012c e0af      	LDI  R26,LOW(15)
00012d e0b0      	LDI  R27,0
00012e 940e 02aa 	CALL _delay_ms
                 ; 0000 0095   lcd_puts("3:lock 4:unlock");
                +
000130 e6ab     +LDI R26 , LOW ( _0x1B + ( 11 ) )
000131 e0b1     +LDI R27 , HIGH ( _0x1B + ( 11 ) )
                 	__POINTW2MN _0x1B,11
000132 940e 0241 	CALL _lcd_puts
                 ; 0000 0096 }
000134 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _0x1B:
000160           	.BYTE 0x1B
                 ;
                 ;interrupt[2] void trigger_alarm()
                 ; 0000 0099 {
                 
                 	.CSEG
                 _trigger_alarm:
                 ; .FSTART _trigger_alarm
000135 93ea      	ST   -Y,R30
000136 b7ef      	IN   R30,SREG
                 ; 0000 009A   if (is_on == 1 && !is_silent_mode)
000137 fe20      	SBRS R2,0
000138 c002      	RJMP _0x1D
000139 fe22      	SBRS R2,2
00013a c001      	RJMP _0x1E
                 _0x1D:
00013b c002      	RJMP _0x1C
                 _0x1E:
                 ; 0000 009B   {
                 ; 0000 009C     alarm_triggered = 1;
00013c 9468      	SET
00013d f821      	BLD  R2,1
                 ; 0000 009D   } else {
                 _0x1C:
                 ; 0000 009E   return;
                 ; 0000 009F   }
                 ; 0000 00A0 }
                 _0x3F:
00013e bfef      	OUT  SREG,R30
00013f 91e9      	LD   R30,Y+
000140 9518      	RETI
                 ; .FEND
                 ;
                 ;interrupt[TIM1_OVF] void exit_silent_mode()
                 ; 0000 00A3 {
                 _exit_silent_mode:
                 ; .FSTART _exit_silent_mode
000141 93ea      	ST   -Y,R30
000142 b7ef      	IN   R30,SREG
000143 93ea      	ST   -Y,R30
                 ; 0000 00A4   TCCR1B = 0x00; // turn off the timer
000144 e0e0      	LDI  R30,LOW(0)
000145 bdee      	OUT  0x2E,R30
                 ; 0000 00A5   is_silent_mode = 0;
000146 94e8      	CLT
000147 f822      	BLD  R2,2
                 ; 0000 00A6   alarm_triggered = 0;
000148 f821      	BLD  R2,1
                 ; 0000 00A7 }
000149 91e9      	LD   R30,Y+
00014a bfef      	OUT  SREG,R30
00014b 91e9      	LD   R30,Y+
00014c 9518      	RETI
                 ; .FEND
                 ;
                 ;
                 ;void main()
                 ; 0000 00AB {
                 _main:
                 ; .FSTART _main
                 ; 0000 00AC #asm("sei")    // Enable interrupt
00014d 9478      	sei
                 ; 0000 00AD   DDRA = 0x00; // Input
00014e e0e0      	LDI  R30,LOW(0)
00014f bbea      	OUT  0x1A,R30
                 ; 0000 00AE   DDRB = 0x0f; // Keypad Set columns as output and rows as input
000150 e0ef      	LDI  R30,LOW(15)
000151 bbe7      	OUT  0x17,R30
                 ; 0000 00AF   PORTB = 0xf0;
000152 efe0      	LDI  R30,LOW(240)
000153 bbe8      	OUT  0x18,R30
                 ; 0000 00B0   DDRC = 0xff;
000154 efef      	LDI  R30,LOW(255)
000155 bbe4      	OUT  0x14,R30
                 ; 0000 00B1   PORTC = 0x00;
000156 e0e0      	LDI  R30,LOW(0)
000157 bbe5      	OUT  0x15,R30
                 ; 0000 00B2   DDRD = 0b11100000; // Output
000158 eee0      	LDI  R30,LOW(224)
000159 bbe1      	OUT  0x11,R30
                 ; 0000 00B3   PORTD = 0b01000000;
00015a e4e0      	LDI  R30,LOW(64)
00015b bbe2      	OUT  0x12,R30
                 ; 0000 00B4   GICR = 0b01000000;  // Enabling interrupt 0
00015c bfeb      	OUT  0x3B,R30
                 ; 0000 00B5   MCUCR = 0b00000011; // Rising Edge
00015d e0e3      	LDI  R30,LOW(3)
00015e bfe5      	OUT  0x35,R30
                 ; 0000 00B6   GIFR = 0b0000000;
00015f e0e0      	LDI  R30,LOW(0)
000160 bfea      	OUT  0x3A,R30
                 ; 0000 00B7   IS_ON_LED_OUT = 1;
000161 9a96      	SBI  0x12,6
                 ; 0000 00B8   ALARM_OUT = 0;
000162 9895      	CBI  0x12,5
                 ; 0000 00B9   TIMSK |= (1 << TOIE1); // Enable Timer1 Overflow
000163 b7e9      	IN   R30,0x39
000164 60e4      	ORI  R30,4
000165 bfe9      	OUT  0x39,R30
                 ; 0000 00BA 
                 ; 0000 00BB   lcd_init(16);
000166 e1a0      	LDI  R26,LOW(16)
000167 940e 0263 	CALL _lcd_init
                 ; 0000 00BC   delay_ms(10);
000169 940e 029e 	CALL SUBOPT_0x1
                 ; 0000 00BD   lcd_render_guide();
00016b dfaa      	RCALL _lcd_render_guide
                 ; 0000 00BE   delay_ms(10);
00016c 940e 029e 	CALL SUBOPT_0x1
                 ; 0000 00BF   while (1)
                 _0x24:
                 ; 0000 00C0   {
                 ; 0000 00C1     eRemoteAction rmt_action = rmt_no_action;
                 ; 0000 00C2     if (REMOTE_PIN .0 == 1)
00016e 9721      	SBIW R28,1
00016f e0e0      	LDI  R30,LOW(0)
000170 83e8      	ST   Y,R30
                 ;	rmt_action -> Y+0
000171 9bc8      	SBIS 0x19,0
000172 c002      	RJMP _0x27
                 ; 0000 00C3     {
                 ; 0000 00C4       rmt_action = rmt_turn_on;
000173 e0e1      	LDI  R30,LOW(1)
000174 83e8      	ST   Y,R30
                 ; 0000 00C5     }
                 ; 0000 00C6 
                 ; 0000 00C7     if (REMOTE_PIN .1 == 1)
                 _0x27:
000175 9bc9      	SBIS 0x19,1
000176 c002      	RJMP _0x28
                 ; 0000 00C8     {
                 ; 0000 00C9       rmt_action = rmt_turn_off;
000177 e0e2      	LDI  R30,LOW(2)
000178 83e8      	ST   Y,R30
                 ; 0000 00CA     }
                 ; 0000 00CB 
                 ; 0000 00CC     if (REMOTE_PIN .2 == 1)
                 _0x28:
000179 9bca      	SBIS 0x19,2
00017a c002      	RJMP _0x29
                 ; 0000 00CD     {
                 ; 0000 00CE       rmt_action = rmt_discard_alarm;
00017b e0e3      	LDI  R30,LOW(3)
00017c 83e8      	ST   Y,R30
                 ; 0000 00CF     }
                 ; 0000 00D0 
                 ; 0000 00D1     if (REMOTE_PIN .3 == 1)
                 _0x29:
00017d 9bcb      	SBIS 0x19,3
00017e c002      	RJMP _0x2A
                 ; 0000 00D2     {
                 ; 0000 00D3       rmt_action = rmt_turn_on;
00017f e0e1      	LDI  R30,LOW(1)
000180 83e8      	ST   Y,R30
                 ; 0000 00D4     }
                 ; 0000 00D5     if (is_remote_locked != 1)
                 _0x2A:
000181 fc23      	SBRC R2,3
000182 c002      	RJMP _0x2B
                 ; 0000 00D6     {
                 ; 0000 00D7       handle_remote_action(rmt_action);
000183 81a8      	LD   R26,Y
000184 df0e      	RCALL _handle_remote_action
                 ; 0000 00D8     }
                 ; 0000 00D9 
                 ; 0000 00DA     if (KEYPAD_ENABLE_PIN == 1)
                 _0x2B:
000185 9bcb      	SBIS 0x19,3
000186 c021      	RJMP _0x2C
                 ; 0000 00DB     {
                 ; 0000 00DC 
                 ; 0000 00DD       eKeypadAction keypad_action = kp_no_action;
                 ; 0000 00DE       char pressed_key;
                 ; 0000 00DF       pressed_key = read_keypad();
000187 9722      	SBIW R28,2
000188 e0e0      	LDI  R30,LOW(0)
000189 83e9      	STD  Y+1,R30
                 ;	rmt_action -> Y+2
                 ;	keypad_action -> Y+1
                 ;	pressed_key -> Y+0
00018a df21      	RCALL _read_keypad
00018b 83e8      	ST   Y,R30
                 ; 0000 00E0       if (pressed_key == '1')
00018c 81a8      	LD   R26,Y
00018d 33a1      	CPI  R26,LOW(0x31)
00018e f411      	BRNE _0x2D
                 ; 0000 00E1       {
                 ; 0000 00E2         keypad_action = kp_turn_on;
00018f e0e1      	LDI  R30,LOW(1)
000190 83e9      	STD  Y+1,R30
                 ; 0000 00E3       }
                 ; 0000 00E4       if (pressed_key == '2')
                 _0x2D:
000191 81a8      	LD   R26,Y
000192 33a2      	CPI  R26,LOW(0x32)
000193 f411      	BRNE _0x2E
                 ; 0000 00E5       {
                 ; 0000 00E6         keypad_action = kp_turn_off;
000194 e0e2      	LDI  R30,LOW(2)
000195 83e9      	STD  Y+1,R30
                 ; 0000 00E7       }
                 ; 0000 00E8       if (pressed_key == '3')
                 _0x2E:
000196 81a8      	LD   R26,Y
000197 33a3      	CPI  R26,LOW(0x33)
000198 f411      	BRNE _0x2F
                 ; 0000 00E9       {
                 ; 0000 00EA         keypad_action = kp_lock_remote;
000199 e0e3      	LDI  R30,LOW(3)
00019a 83e9      	STD  Y+1,R30
                 ; 0000 00EB       }
                 ; 0000 00EC       if (pressed_key == '4')
                 _0x2F:
00019b 81a8      	LD   R26,Y
00019c 33a4      	CPI  R26,LOW(0x34)
00019d f411      	BRNE _0x30
                 ; 0000 00ED       {
                 ; 0000 00EE         keypad_action = kp_unlock_remote;
00019e e0e4      	LDI  R30,LOW(4)
00019f 83e9      	STD  Y+1,R30
                 ; 0000 00EF       }
                 ; 0000 00F0       if (pressed_key == '5')
                 _0x30:
0001a0 81a8      	LD   R26,Y
0001a1 33a5      	CPI  R26,LOW(0x35)
0001a2 f411      	BRNE _0x31
                 ; 0000 00F1       {
                 ; 0000 00F2         keypad_action = kp_discard_alarm;
0001a3 e0e5      	LDI  R30,LOW(5)
0001a4 83e9      	STD  Y+1,R30
                 ; 0000 00F3       }
                 ; 0000 00F4       handle_keypad_action(keypad_action);
                 _0x31:
0001a5 81a9      	LDD  R26,Y+1
0001a6 df4e      	RCALL _handle_keypad_action
                 ; 0000 00F5     }
0001a7 9622      	ADIW R28,2
                 ; 0000 00F6     IS_ON_LED_OUT = is_on == 1 ? 1 : 0;
                 _0x2C:
0001a8 fe20      	SBRS R2,0
0001a9 c002      	RJMP _0x32
0001aa e0e1      	LDI  R30,LOW(1)
0001ab c001      	RJMP _0x33
                 _0x32:
0001ac e0e0      	LDI  R30,LOW(0)
                 _0x33:
0001ad 30e0      	CPI  R30,0
0001ae f411      	BRNE _0x35
0001af 9896      	CBI  0x12,6
0001b0 c001      	RJMP _0x36
                 _0x35:
0001b1 9a96      	SBI  0x12,6
                 _0x36:
                 ; 0000 00F7     ALARM_OUT = alarm_triggered;
0001b2 fc21      	SBRC R2,1
0001b3 c002      	RJMP _0x37
0001b4 9895      	CBI  0x12,5
0001b5 c001      	RJMP _0x38
                 _0x37:
0001b6 9a95      	SBI  0x12,5
                 _0x38:
                 ; 0000 00F8     IS_SENSOR_PAUSED_LED = is_silent_mode ? 1 : 0;
0001b7 fe22      	SBRS R2,2
0001b8 c002      	RJMP _0x39
0001b9 e0e1      	LDI  R30,LOW(1)
0001ba c001      	RJMP _0x3A
                 _0x39:
0001bb e0e0      	LDI  R30,LOW(0)
                 _0x3A:
0001bc 30e0      	CPI  R30,0
0001bd f411      	BRNE _0x3C
0001be 9897      	CBI  0x12,7
0001bf c001      	RJMP _0x3D
                 _0x3C:
0001c0 9a97      	SBI  0x12,7
                 _0x3D:
                 ; 0000 00F9   }
0001c1 9621      	ADIW R28,1
0001c2 cfab      	RJMP _0x24
                 ; 0000 00FA }
                 _0x3E:
0001c3 cfff      	RJMP _0x3E
                 ; .FEND
                     .equ __lcd_direction=__lcd_port-1
                     .equ __lcd_pin=__lcd_port-2
                     .equ __lcd_rs=0
                     .equ __lcd_rd=1
                     .equ __lcd_enable=2
                     .equ __lcd_busy_flag=7
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_delay_G100:
                 ; .FSTART __lcd_delay_G100
0001c4 e0ff          ldi   r31,15
                 __lcd_delay0:
0001c5 95fa          dec   r31
0001c6 f7f1          brne  __lcd_delay0
0001c7 9508      	RET
                 ; .FEND
                 __lcd_ready:
                 ; .FSTART __lcd_ready
0001c8 b3a4          in    r26,__lcd_direction
0001c9 70af          andi  r26,0xf                 ;set as input
0001ca bba4          out   __lcd_direction,r26
0001cb 9aa9          sbi   __lcd_port,__lcd_rd     ;RD=1
0001cc 98a8          cbi   __lcd_port,__lcd_rs     ;RS=0
                 __lcd_busy:
0001cd dff6      	RCALL __lcd_delay_G100
0001ce 9aaa          sbi   __lcd_port,__lcd_enable ;EN=1
0001cf dff4      	RCALL __lcd_delay_G100
0001d0 b3a3          in    r26,__lcd_pin
0001d1 98aa          cbi   __lcd_port,__lcd_enable ;EN=0
0001d2 dff1      	RCALL __lcd_delay_G100
0001d3 9aaa          sbi   __lcd_port,__lcd_enable ;EN=1
0001d4 dfef      	RCALL __lcd_delay_G100
0001d5 98aa          cbi   __lcd_port,__lcd_enable ;EN=0
0001d6 fda7          sbrc  r26,__lcd_busy_flag
0001d7 cff5          rjmp  __lcd_busy
0001d8 9508      	RET
                 ; .FEND
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
0001d9 7fa0          andi  r26,0xf0
0001da 2bab          or    r26,r27
0001db bba5          out   __lcd_port,r26          ;write
0001dc 9aaa          sbi   __lcd_port,__lcd_enable ;EN=1
0001dd 940e 01c4 	CALL __lcd_delay_G100
0001df 98aa          cbi   __lcd_port,__lcd_enable ;EN=0
0001e0 940e 01c4 	CALL __lcd_delay_G100
0001e2 9508      	RET
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
0001e3 93aa      	ST   -Y,R26
0001e4 98a9          cbi  __lcd_port,__lcd_rd 	  ;RD=0
0001e5 b3a4          in    r26,__lcd_direction
0001e6 6fa7          ori   r26,0xf0 | (1<<__lcd_rs) | (1<<__lcd_rd) | (1<<__lcd_enable) ;set as output
0001e7 bba4          out   __lcd_direction,r26
0001e8 b3b5          in    r27,__lcd_port
0001e9 70bf          andi  r27,0xf
0001ea 81a8          ld    r26,y
0001eb dfed      	RCALL __lcd_write_nibble_G100
0001ec 81a8          ld    r26,y
0001ed 95a2          swap  r26
0001ee dfea      	RCALL __lcd_write_nibble_G100
0001ef 9aa9          sbi   __lcd_port,__lcd_rd     ;RD=1
0001f0 940c 028e 	JMP  _0x2020001
                 ; .FEND
                 __lcd_read_nibble_G100:
                 ; .FSTART __lcd_read_nibble_G100
0001f2 9aaa          sbi   __lcd_port,__lcd_enable ;EN=1
0001f3 940e 01c4 	CALL __lcd_delay_G100
0001f5 b3e3          in    r30,__lcd_pin           ;read
0001f6 98aa          cbi   __lcd_port,__lcd_enable ;EN=0
0001f7 940e 01c4 	CALL __lcd_delay_G100
0001f9 7fe0          andi  r30,0xf0
0001fa 9508      	RET
                 ; .FEND
                 _lcd_read_byte0_G100:
                 ; .FSTART _lcd_read_byte0_G100
0001fb 940e 01c4 	CALL __lcd_delay_G100
0001fd dff4      	RCALL __lcd_read_nibble_G100
0001fe 2fae          mov   r26,r30
0001ff dff2      	RCALL __lcd_read_nibble_G100
000200 98a9          cbi   __lcd_port,__lcd_rd     ;RD=0
000201 95e2          swap  r30
000202 2bea          or    r30,r26
000203 9508      	RET
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
000204 93aa      	ST   -Y,R26
000205 940e 01c8 	CALL __lcd_ready
000207 81e8      	LD   R30,Y
000208 e0f0      	LDI  R31,0
000209 58e5      	SUBI R30,LOW(-__base_y_G100)
00020a 4ffe      	SBCI R31,HIGH(-__base_y_G100)
00020b 81e0      	LD   R30,Z
00020c 81a9      	LDD  R26,Y+1
00020d 0fae      	ADD  R26,R30
00020e 940e 01e3 	CALL __lcd_write_data
000210 8079      	LDD  R7,Y+1
000211 8068      	LDD  R6,Y+0
000212 9622      	ADIW R28,2
000213 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
000214 940e 01c8 	CALL __lcd_ready
000216 e0a2      	LDI  R26,LOW(2)
000217 940e 01e3 	CALL __lcd_write_data
000219 940e 01c8 	CALL __lcd_ready
00021b e0ac      	LDI  R26,LOW(12)
00021c 940e 01e3 	CALL __lcd_write_data
00021e 940e 01c8 	CALL __lcd_ready
000220 e0a1      	LDI  R26,LOW(1)
000221 940e 01e3 	CALL __lcd_write_data
000223 e0e0      	LDI  R30,LOW(0)
000224 2e6e      	MOV  R6,R30
000225 2e7e      	MOV  R7,R30
000226 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
000227 93aa      	ST   -Y,R26
000228 93ef          push r30
000229 93ff          push r31
00022a 81a8          ld   r26,y
00022b 9468          set
00022c 30aa          cpi  r26,10
00022d f019          breq __lcd_putchar1
00022e 94e8          clt
00022f 1479      	CP   R7,R9
000230 f030      	BRLO _0x2000004
                 	__lcd_putchar1:
000231 9463      	INC  R6
000232 e0e0      	LDI  R30,LOW(0)
000233 93ea      	ST   -Y,R30
000234 2da6      	MOV  R26,R6
000235 dfce      	RCALL _lcd_gotoxy
000236 f036      	brts __lcd_putchar0
                 _0x2000004:
000237 9473      	INC  R7
000238 df8f          rcall __lcd_ready
000239 9aa8          sbi  __lcd_port,__lcd_rs ;RS=1
00023a 81a8      	LD   R26,Y
00023b 940e 01e3 	CALL __lcd_write_data
                 __lcd_putchar0:
00023d 91ff          pop  r31
00023e 91ef          pop  r30
00023f 940c 028e 	JMP  _0x2020001
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
000241 93ba      	ST   -Y,R27
000242 93aa      	ST   -Y,R26
000243 931a      	ST   -Y,R17
                 _0x2000005:
000244 81a9      	LDD  R26,Y+1
000245 81ba      	LDD  R27,Y+1+1
000246 91ed      	LD   R30,X+
000247 83a9      	STD  Y+1,R26
000248 83ba      	STD  Y+1+1,R27
000249 2f1e      	MOV  R17,R30
00024a 30e0      	CPI  R30,0
00024b f019      	BREQ _0x2000007
00024c 2fa1      	MOV  R26,R17
00024d dfd9      	RCALL _lcd_putchar
00024e cff5      	RJMP _0x2000005
                 _0x2000007:
00024f 8118      	LDD  R17,Y+0
000250 9623      	ADIW R28,3
000251 9508      	RET
                 ; .FEND
                 __long_delay_G100:
                 ; .FSTART __long_delay_G100
000252 27aa          clr   r26
000253 27bb          clr   r27
                 __long_delay0:
000254 9711          sbiw  r26,1         ;2 cycles
000255 f7f1          brne  __long_delay0 ;2 cycles
000256 9508      	RET
                 ; .FEND
                 __lcd_init_write_G100:
                 ; .FSTART __lcd_init_write_G100
000257 93aa      	ST   -Y,R26
000258 98a9          cbi  __lcd_port,__lcd_rd 	  ;RD=0
000259 b3a4          in    r26,__lcd_direction
00025a 6fa7          ori   r26,0xf7                ;set as output
00025b bba4          out   __lcd_direction,r26
00025c b3b5          in    r27,__lcd_port
00025d 70bf          andi  r27,0xf
00025e 81a8          ld    r26,y
00025f 940e 01d9 	CALL __lcd_write_nibble_G100
000261 9aa9          sbi   __lcd_port,__lcd_rd     ;RD=1
000262 c02b      	RJMP _0x2020001
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
000263 93aa      	ST   -Y,R26
000264 98aa          cbi   __lcd_port,__lcd_enable ;EN=0
000265 98a8          cbi   __lcd_port,__lcd_rs     ;RS=0
000266 8098      	LDD  R9,Y+0
000267 81e8      	LD   R30,Y
000268 58e0      	SUBI R30,-LOW(128)
                +
000269 93e0 017d+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
00026b 81e8      	LD   R30,Y
00026c 54e0      	SUBI R30,-LOW(192)
                +
00026d 93e0 017e+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
00026f d032      	RCALL SUBOPT_0x2
000270 d031      	RCALL SUBOPT_0x2
000271 d030      	RCALL SUBOPT_0x2
000272 dfdf      	RCALL __long_delay_G100
000273 e2a0      	LDI  R26,LOW(32)
000274 dfe2      	RCALL __lcd_init_write_G100
000275 dfdc      	RCALL __long_delay_G100
000276 e2a8      	LDI  R26,LOW(40)
000277 d02e      	RCALL SUBOPT_0x3
000278 e0a4      	LDI  R26,LOW(4)
000279 d02c      	RCALL SUBOPT_0x3
00027a e8a5      	LDI  R26,LOW(133)
00027b d02a      	RCALL SUBOPT_0x3
00027c b3a4          in    r26,__lcd_direction
00027d 70af          andi  r26,0xf                 ;set as input
00027e bba4          out   __lcd_direction,r26
00027f 9aa9          sbi   __lcd_port,__lcd_rd     ;RD=1
000280 940e 01fb 	CALL _lcd_read_byte0_G100
000282 30e5      	CPI  R30,LOW(0x5)
000283 f011      	BREQ _0x200000B
000284 e0e0      	LDI  R30,LOW(0)
000285 c008      	RJMP _0x2020001
                 _0x200000B:
000286 940e 01c8 	CALL __lcd_ready
000288 e0a6      	LDI  R26,LOW(6)
000289 940e 01e3 	CALL __lcd_write_data
00028b 940e 0214 	CALL _lcd_clear
00028d e0e1      	LDI  R30,LOW(1)
                 _0x2020001:
00028e 9621      	ADIW R28,1
00028f 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 __base_y_G100:
00017b           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x0:
000290 b216      	IN   R1,22
000291 81e8      	LD   R30,Y
000292 81f9      	LDD  R31,Y+1
000293 9634      	ADIW R30,4
000294 e0a1      	LDI  R26,LOW(1)
000295 e0b0      	LDI  R27,HIGH(1)
000296 940e 02c0 	CALL __LSLW12
000298 2da1      	MOV  R26,R1
000299 e0b0      	LDI  R27,0
00029a 23ea      	AND  R30,R26
00029b 23fb      	AND  R31,R27
00029c 9730      	SBIW R30,0
00029d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
00029e e0aa      	LDI  R26,LOW(10)
00029f e0b0      	LDI  R27,0
0002a0 940c 02aa 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2:
0002a2 940e 0252 	CALL __long_delay_G100
0002a4 e3a0      	LDI  R26,LOW(48)
0002a5 cfb1      	RJMP __lcd_init_write_G100
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3:
0002a6 940e 01e3 	CALL __lcd_write_data
0002a8 940c 0252 	JMP  __long_delay_G100
                 
                 
                 	.CSEG
                 _delay_ms:
0002aa 9610      	adiw r26,0
0002ab f039      	breq __delay_ms1
                 __delay_ms0:
0002ac 95a8      	wdr
                +
0002ad ef8a     +LDI R24 , LOW ( 0xFA )
0002ae e090     +LDI R25 , HIGH ( 0xFA )
                +__DELAY_USW_LOOP :
0002af 9701     +SBIW R24 , 1
0002b0 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA
0002b1 9711      	sbiw r26,1
0002b2 f7c9      	brne __delay_ms0
                 __delay_ms1:
0002b3 9508      	ret
                 
                 __ANEGW1:
0002b4 95f1      	NEG  R31
0002b5 95e1      	NEG  R30
0002b6 40f0      	SBCI R31,0
0002b7 9508      	RET
                 
                 __LSLB12:
0002b8 23ee      	TST  R30
0002b9 2e0e      	MOV  R0,R30
0002ba 2fea      	MOV  R30,R26
0002bb f019      	BREQ __LSLB12R
                 __LSLB12L:
0002bc 0fee      	LSL  R30
0002bd 940a      	DEC  R0
0002be f7e9      	BRNE __LSLB12L
                 __LSLB12R:
0002bf 9508      	RET
                 
                 __LSLW12:
0002c0 23ee      	TST  R30
0002c1 2e0e      	MOV  R0,R30
0002c2 01fd      	MOVW R30,R26
0002c3 f021      	BREQ __LSLW12R
                 __LSLW12L:
0002c4 0fee      	LSL  R30
0002c5 1fff      	ROL  R31
0002c6 940a      	DEC  R0
0002c7 f7e1      	BRNE __LSLW12L
                 __LSLW12R:
0002c8 9508      	RET
                 
                 __MULW12U:
0002c9 9ffa      	MUL  R31,R26
0002ca 2df0      	MOV  R31,R0
0002cb 9feb      	MUL  R30,R27
0002cc 0df0      	ADD  R31,R0
0002cd 9fea      	MUL  R30,R26
0002ce 2de0      	MOV  R30,R0
0002cf 0df1      	ADD  R31,R1
0002d0 9508      	RET
                 
                 __MULB1W2U:
0002d1 2f6e      	MOV  R22,R30
0002d2 9f6a      	MUL  R22,R26
0002d3 01f0      	MOVW R30,R0
0002d4 9f6b      	MUL  R22,R27
0002d5 0df0      	ADD  R31,R0
0002d6 9508      	RET
                 
                 __MULW12:
0002d7 d004      	RCALL __CHKSIGNW
0002d8 dff0      	RCALL __MULW12U
0002d9 f40e      	BRTC __MULW121
0002da dfd9      	RCALL __ANEGW1
                 __MULW121:
0002db 9508      	RET
                 
                 __CHKSIGNW:
0002dc 94e8      	CLT
0002dd fff7      	SBRS R31,7
0002de c002      	RJMP __CHKSW1
0002df dfd4      	RCALL __ANEGW1
0002e0 9468      	SET
                 __CHKSW1:
0002e1 ffb7      	SBRS R27,7
0002e2 c006      	RJMP __CHKSW2
0002e3 95a0      	COM  R26
0002e4 95b0      	COM  R27
0002e5 9611      	ADIW R26,1
0002e6 f800      	BLD  R0,0
0002e7 9403      	INC  R0
0002e8 fa00      	BST  R0,0
                 __CHKSW2:
0002e9 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16A register use summary:
r0 :  16 r1 :   6 r2 :  19 r3 :   0 r4 :   1 r5 :   1 r6 :   4 r7 :   4 
r8 :   0 r9 :   2 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   4 r17:  12 r18:   0 r19:   0 r20:   0 r21:   0 r22:   5 r23:   0 
r24:   9 r25:   3 r26: 112 r27:  30 r28:  12 r29:   1 r30: 160 r31:  28 
x  :   4 y  :  94 z  :   9 
Registers used: 22 out of 35 (62.9%)

ATmega16A instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   1 add   :   5 
adiw  :  13 and   :   3 andi  :   6 asr   :   0 bclr  :   0 bld   :  14 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :   8 
brge  :   2 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   1 
brlt  :   0 brmi  :   0 brne  :  27 brpl  :   0 brsh  :   0 brtc  :   1 
brts  :   1 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 call  :  39 
cbi   :  14 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   4 cls   :   0 clt   :   8 clv   :   0 clz   :   0 com   :   3 
cp    :   1 cpc   :   0 cpi   :  20 cpse  :   0 dec   :   4 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :  15 inc   :   3 jmp   :  30 ld    :  36 ldd   :  19 ldi   :  83 
lds   :   0 lpm   :   9 lsl   :   2 lsr   :   0 mov   :  14 movw  :   6 
mul   :   5 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   2 
ori   :   5 out   :  30 pop   :   2 push  :   2 rcall :  29 ret   :  22 
reti  :   2 rjmp  :  33 rol   :   1 ror   :   0 sbc   :   1 sbci  :   3 
sbi   :  13 sbic  :   1 sbis  :   5 sbiw  :  12 sbr   :   0 sbrc  :   3 
sbrs  :   6 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   7 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  29 std   :  15 sts   :   2 sub   :   1 subi  :   4 swap  :   2 
tst   :   2 wdr   :   1 
Instructions used: 62 out of 116 (53.4%)

ATmega16A memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0005d4   1414     78   1492   16384   9.1%
[.dseg] 0x000060 0x00017f      0     31     31    1024   3.0%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 6 warnings
